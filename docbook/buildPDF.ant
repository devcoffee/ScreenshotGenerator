<?xml version="1.0"?>
<!--
  - Author: Lars Vogel
-->
<project name="docbookpdf" default="all" basedir=".">
  <description>
    This Ant build.xml file is used to transform DocBook XML to various output formats
  </description>
	
	<!-- default properties http://ant.apache.org/manual/properties.html -->
	<!-- how to define a properties http://ant.apache.org/manual/Tasks/property.html -->
	<!-- set global properties for this build -->
	
	<!-- difference of location and value: Sets the property to the absolute filename of the given file. 
	If the value of this attribute is an absolute path, 
	it is left unchanged (with / and \ characters converted to the current platforms conventions). 
	Otherwise it is taken as a path relative to the project's basedir and expanded. -->	
  <property name="src" location="xmlInput"/> <!-- all xml as input of process -->
  <property name="build" location="build"/> <!-- class file in case has custome class implement  -->
  <property name="tmp" location="tmp" /> <!-- temp file when executer build -->
	<property name="tmp.merged.xml" value="${tmp}/xml" /> <!-- temp file when executer build -->
	<property name="tmp.po" value="${tmp}/po" /> <!-- temp file when executer build -->
  <property name="lib" location="lib" /> <!-- all library to build -->
	<property name="dist" location="dist" /> <!-- final result without temp file -->
	<property name="resource" location="resource" /> <!-- contain dtx, xsl,.. -->
	
  <property name="docbook.xsl" value="${resource}/docbook-xsl-1.78.1" />
	
  <!--
    - Usage of the differect style sheets which will be used for the transformation
  -->
  <property name="eclipse.stylesheet" value="${docbook.xsl}/eclipse/eclipse.xsl" />
  <property name="html.stylesheet" value="${docbook.xsl}/html/docbook.xsl" />
  <property name="fo.stylesheet" value="${docbook.xsl}/fo/docbook.xsl" />
  <property name="javahelp.stylesheet" value="${docbook.xsl}/javahelp/javahelp.xsl" />
  <property name="chunk-html.stylesheet" value="${docbook.xsl}/html/chunk.xsl" />
	
	<path id="project.class.path">
    <pathelement path="${classpath}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
	
	<!--
	      - task define
	-->
	<taskdef name="xsl.xinclude" classname="org.eclipse.wst.xsl.core.internal.ant.XIncludeTask" />
  <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" />
	
  <!--
    - target: clean all thing before run task. clear tmp folder, result folder
  -->
  <target name="clean" description="Cleans up generated files.">
    <delete dir="${tmp}" />
  	<delete dir="${build}" />
  	<delete dir="${dist}" />
  </target>
	
	<!--
	  - target: create all requirement environment, tmp folder, result folder,..
	-->
  <target name="init">
    <mkdir dir="${tmp}" />
  	<mkdir dir="${build}" />
  	<mkdir dir="${dist}" />
  </target>
	
	<!--
	    - target: validate all xml file before merged
	-->
  <target name = "pre-validate">
    <xmlvalidate failonerror="no" lenient="no" warn="yes">
      <fileset dir="${src}">
        <include name="**/1099Box.xml" />
      </fileset>       
    </xmlvalidate>  
  </target>
	
	<!--
	      - target: validate all xml after merged
	-->
  <target name = "validate">
    <xmlvalidate failonerror="yes" lenient="no" warn="yes">
      <fileset dir="${tmp.merged.xml}">
        <include name="**/*.xml" />
      </fileset>       
    </xmlvalidate>
	</target>
	
	<!--
	      - target: merged content of fragment file to one file
	-->
  <target name = "mergedXml">    
    <xsl.xinclude in="${src}/book.xml" out="${tmp.merged.xml}/book.xml"/>        
  </target>
	
	<target name="build-pdf-merged" description="build pdf after merged file xml">
    <!-- Convert DocBook Files into FO -->
    <xslt style="${fo.stylesheet}" extension=".fo" basedir="${tmp}" destdir="${tmp}/po">
      <fileset dir="${tmp.merged.xml}">
        <include name="book.xml" />
      </fileset>
      <param name="section.autolabel" expression="1" />
    </xslt>
    <!-- Convert FO Files into pdf -->
    <fop format="application/pdf" outdir="${dist}/pdf" relativebase="true">
      <fileset dir="${tmp.po}">
        <include name="**/*.fo" />
      </fileset>
    </fop>
	</target>
	
	<target name="fo-pdf">
	   <fop format="application/pdf" outdir="${dist}/pdf" relativebase="true">
	      <fileset dir="${tmp.po}">
	        <include name="**/*.fo" />
	      </fileset>
	    </fop>
		</target>
	<target name="build-pdf" depends="clean, init, pre-validate, mergedXml, build-pdf-merged" description="Make pdf file from xml">
		
  </target>
	
	<target name="all" depends = "build-pdf" description="run all task with order to get all result">    
  </target>
	
</project>
	